---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
# 간호사 듀티 관리 프로그램 코드 컨벤션

## 코드 스타일

1. **TypeScript 사용**
   - 모든 파일은 TypeScript로 작성 (.ts, .tsx)
   - 명시적 타입 선언으로 코드 안정성 확보
   - 인터페이스와 타입 정의는 관련 파일 내부에 포함

2. **네이밍 컨벤션**
   - 변수, 함수: camelCase
   - 클래스, 인터페이스, 타입: PascalCase
   - 상수: UPPER_SNAKE_CASE
   - 컴포넌트 파일명: PascalCase (예: NurseForm.tsx)
   - 일반 유틸리티 파일명: camelCase (예: dateUtils.ts)

3. **함수 및 컴포넌트**
   - 함수는 작고 단일 책임을 가지도록 구성
   - React 컴포넌트는 가능한 함수형 컴포넌트로 작성
   - Props 인터페이스 정의 필수

## 프로젝트 구조

1. **폴더 구조**
   - 기능별로 파일 그룹화
   - 컴포넌트는 재사용성에 따라 구성

2. **임포트 순서**
   - 표준 라이브러리 (Node.js)
   - 외부 패키지 (npm)
   - 프로젝트 내부 모듈 (상대 경로)

3. **데이터베이스 작업**
   - SQL 쿼리는 가독성을 위해 템플릿 리터럴 사용
   - 각 도메인별 작업 함수는 별도 객체로 그룹화

## 오류 처리

1. **비동기 작업**
   - async/await 사용 권장
   - 모든 비동기 작업은 try/catch로 오류 처리

2. **오류 응답 포맷**
   - 일관된 오류 응답 구조 사용
   - { success: boolean, data?: any, error?: string }

3. **IPC 통신**
   - 응답은 항상 success 상태를 포함
   - 오류 발생 시 콘솔에 로깅 후 오류 메시지 반환

## 코드 품질

1. **ESLint 및 Prettier**
   - 코드 품질 및 일관성 확보를 위한 린팅
   - 자동 포맷팅으로 스타일 일관성 유지

2. **주석**
   - 복잡한 비즈니스 로직에는 주석 필수
   - 함수와 컴포넌트는 목적을 설명하는 주석 권장
